module generation/to-sdf3
imports
  signatures/-
  
  signatures/TemplateLang-sig
  signatures/aliases/Aliases-sig
  signatures/aterms/Aterms-sig
  signatures/basic/Basic-sig
  signatures/characterclass/Character-sig
  signatures/characterclass/Character-Class-sig
  signatures/constants/RealCon-sig
  signatures/grammar/Grammars-sig
  signatures/kernel/Kernel-sig
  signatures/labels/Labels-sig
  signatures/layout-constraints/Layout-Constraints-sig
  signatures/lifting/Lifting-sig
  signatures/literals/Literals-sig
  signatures/modules/Modules-sig
  signatures/priority/Priority-sig
  signatures/regular/Regular-sig
  signatures/renaming/Renaming-sig
  signatures/restrictions/Restrictions-sig
  signatures/sdf2-core/Sdf2-sig
  signatures/sdf2-core/Sdf2-Syntax-sig
  signatures/sorts/Sorts-sig
  signatures/symbols/Symbols-sig
  signatures/symbols/Start-Symbols-sig

overlays
  sdf-cons(x) = term(default(appl(unquoted("cons"), [fun(quoted(x))]))) 
  sdf-cons-norm(x) = default(appl(unquoted("cons"),[[fun(quoted(x))]]))

rules

  module-to-sdf3:
    'module(unparameterized(mn), i*, e*) -> Module(Unparameterized(mn), i'*, sections*)
    with
      sections* := <filter(section-to-sdf3); try(flatten-list)> e*;
      i'* := <map(imports-to-sdf)> i*;
      <reset-counter> "SDF3"  
      
  module-to-sdf:
    'module(unparameterized(mn)) -> Module(Unparameterized(mn)) 
      
  
  imports-to-sdf: 
    imports(i) -> Imports(i') 
    with
      i' := <map(module-to-sdf)> i
  
  /* SDF sections */
  section-to-sdf3:
    exports(s) -> s'
    with
      s' := <section-to-sdf3; try(flatten-list)> s
 
  section-to-sdf3:
    hiddens(s) -> s'
    with
      s' := <section-to-sdf3; try(flatten-list)> s
 
  section-to-sdf3:
    conc-grammars(g1, g2) -> [g1', g2']
  with
    g1' := <section-to-sdf3> g1;
    g2' := <section-to-sdf3> g2   
    
  
  //Context-free Start Symbols
  section-to-sdf3: 
    context-free-start-symbols(symbols) -> SDFSection(ContextFreeStartSymbols(symbols')) 
    with
      symbols' := <term-translation> symbols
      
      
  //KernelStartSymbols -> kernel-start-symbols
  section-to-sdf3: 
    kernel-start-symbols(symbols) -> SDFSection(KernelStartSymbols(symbols'))
    with
      symbols' := <term-translation> symbols
      
  //LexicalStartSymbols -> lexical-start-symbols
  section-to-sdf3: 
    lexical-start-symbols(symbols) -> SDFSection(LexicalStartSymbols(symbols'))
    with
      symbols' := <term-translation> symbols
      
  //productions section
  section-to-sdf3:
    context-free-syntax(prods*) -> result
    with
      prods'* := <filter(prod-to-sdf3); flatten-list> prods*;
      result  := <not(?[]) < !SDFSection(ContextFreeSyntax(prods'*)) + ![]> prods'*  
      
    
      
   //lexical syntax reductive section
  section-to-sdf3:
    lexical-syntax(prods*) -> SDFSection(LexicalSyntax(prods'*))
    with
      prods'* := <map(prod-to-sdf3); flatten-list> prods*   
      
 
 //kernel syntax
  section-to-sdf3:
    syntax(prods*) -> SDFSection(Kernel(prods'*))
    with
      prods'* := <map(prod-to-sdf3); flatten-list> prods*
      
      
  //lexical restrictions
  section-to-sdf3:
    lexical-restrictions(restrictions*) -> SDFSection(LexicalRestrictions(restrictions'*))
    with
      restrictions'* := <term-translation> restrictions*
      
  //context-free restrictions
   section-to-sdf3:
    context-free-restrictions(restrictions*) -> SDFSection(ContextFreeRestrictions(restrictions'*))
    with
      restrictions'* := <term-translation> restrictions*
  
  //kernel restrictions
  section-to-sdf3:
  restrictions(restrictions*) -> SDFSection(Restrictions(restrictions'*))
    with
      restrictions'* := <term-translation> restrictions*
      
  //sorts 
  section-to-sdf3:
  'sorts(symbols*) ->SDFSection(Sorts(symbols'*))
  with
      symbols'* := <term-translation> symbols*
      
  
  //aliases
  section-to-sdf3:
  aliases(aliases*) -> SDFSection(Aliases(aliases'*))
    with
      aliases'* := <term-translation> aliases*
  
  //variables
  section-to-sdf3:
    variables(prods*) -> SDFSection(VariablesProductive(prods'*))
    with
      prods'* := <map(prod-to-sdf3); flatten-list> prods*
  
    //lexical variables
   section-to-sdf3:
    lexical-variables(prods*) -> SDFSection(LexVariables(prods'*))
    with
      prods'* := <map(prod-to-sdf3); flatten-list> prods*
 
 //context-free priorities
  section-to-sdf3:
    context-free-priorities(priorities*) -> SDFSection(ContextFreePriorities(priorities'*))
    with
      priorities'* := <map(priority-to-sdf3)> priorities*
  
  //lexical priorities
  section-to-sdf3:
    lexical-priorities(priorities*) -> SDFSection(LexicalPriorities(priorities'*))
    with
      priorities'* := <map(regular-priority-to-sdf3)> priorities*
  
  //kernel priorities
  section-to-sdf3:
    priorities(priorities*) -> SDFSection(Priorities(priorities'*))
    with
      priorities'* := <map(regular-priority-to-sdf3)> priorities*
      
  regular-priority-to-sdf3:
    chain(groups) -> Chain(groups')
    with
      groups' := <map(regular-group-to-sdf3 <+ term-translation)> groups
  
  regular-priority-to-sdf3:
    assoc(gr1, associativity, gr2) -> Assoc(gr1', associativity', gr2')
    with
      gr1' := <regular-group-to-sdf3 <+ term-translation> gr1;
      associativity' := <term-translation> associativity;
      gr2' := <regular-group-to-sdf3 <+ term-translation> gr2     
 
  regular-group-to-sdf3:
    simple-group(prod) -> SimpleGroup(prod')
    where
      prod' := <regular-priority-prod-to-sdf3> prod
  
  regular-group-to-sdf3:
    prods-group(prods) -> ProdsGroup(prods')
    with
      prods' := <filter(regular-priority-prod-to-sdf3)> prods
    
  regular-group-to-sdf3:
    assoc-group(a, prods) -> AssocGroup(a', prods')
    with
      a' := <term-translation> a;
      prods' := <filter(regular-priority-prod-to-sdf3)> prods
      
  regular-group-to-sdf3:
    with-arguments(group, arg) -> WithArguments(group', arg') 
    with
        arg' := <term-translation> arg;
        group' := <regular-group-to-sdf3> group  
        
  regular-group-to-sdf3:
     non-transitive(group) -> NonTransitive(group')
    with
        group' := <regular-group-to-sdf3> group  
 
 
   //is this true? remove the constructors?
  regular-priority-prod-to-sdf3 :
    prod(symbols*, Symbol, attrs) -> <term-translation> result
    with
        a* := <?attrs(<id>) <+ ![]> attrs;
      symbols'* := <topdown(try(symbol-to-sdf3))> symbols*;
      p* := <collect-om(new-prods)> symbols*;
      a'* := <remove-all(?sdf-cons(_) + ?sdf-cons-norm(_) + ?Constructor(_))> a* ;
      result := SdfProduction(Symbol, Rhs(symbols'*), Attrs(a*)) 
      
    
  
  priority-to-sdf3:
    chain(groups) -> Chain(groups')
    with
      groups' := <map(group-to-sdf3 <+ term-translation)> groups
  
  priority-to-sdf3:
    assoc(gr1, associativity, gr2) -> Assoc(gr1', associativity', gr2')
    with
      gr1' := <group-to-sdf3 <+ term-translation> gr1;
      associativity' := <term-translation> associativity;
      gr2' := <group-to-sdf3 <+ term-translation> gr2

  group-to-sdf3:
    simple-group(prod) -> group
    where
      group := <priority-prod-to-sdf3; !SimpleRefGroup(<id>) <+ !ProdsRefGroup([])> prod
  
  group-to-sdf3:
    prods-group(prods) -> ProdsRefGroup(prods')
    with
      prods' := <filter(priority-prod-to-sdf3)> prods
    
  group-to-sdf3:
    assoc-group(a, prods) -> AssocRefGroup(a', prods')
    with
      a' := <term-translation> a;
      prods' := <filter(priority-prod-to-sdf3)> prods
      
  group-to-sdf3:
    with-arguments(group, arg) -> WithArguments(group', arg') 
    with
        arg' := <term-translation> arg;
        group' := <group-to-sdf3> group  
        
  group-to-sdf3:
     non-transitive(group) -> NonTransitive(group')
    with
        group' := <group-to-sdf3> group       
 
 //Priority-productions
 priority-prod-to-sdf3:
  prod(symbols*, sort(s), attrs) -> <term-translation> result
    where
      not(<?[sort("CONTENTCOMPLETE")]> symbols*)
    with
      a* := <?attrs(<id>) <+ ![]> attrs
    with      
      c := <getfirst(lift-constr)> a*;
      a'* := <remove-all(?sdf-cons(_) + ?Constructor(_))> a* ;
      result := SortConsRef(Sort(s), c)
    <+  debug(!"Production does not have a constructor, conversion failed: ")
    
 
 priority-prod-to-sdf3:
    prod(symbols*, lex(sort(s)), attrs) -> <term-translation> result
    with
      a* := <?attrs(<id>) <+ ![]> attrs
    with 
      c := <getfirst(lift-constr)> a*;
      a'* := <remove-all(?sdf-cons(_) + ?Constructor(_))> a* ;
      result := SortConsRef(Lex(Sort(s)), c)
    <+  debug(!"Production does not have a constructor, conversion failed: ")
  
 
 priority-prod-to-sdf3:
    prod(symbols*, cf(sort(s)), attrs) -> <term-translation> result
    with
      a* := <?attrs(<id>) <+ ![]> attrs
    with 
      c := <getfirst(lift-constr)> a*;
      a'* := <remove-all(?sdf-cons(_) + ?Constructor(_))> a* ;
      result := SortConsRef(Cf(Sort(s)), c)
    <+ debug(!"Production does not have a constructor, conversion failed: ")
    
 
 priority-prod-to-sdf3:
    prod(symbols*, symbol, attrs) -> <term-translation> result
    where
      not(<?sort(s) + ?cf(sort(s)) + ?lex(sort(s))> symbol)
    with
      a* := <?attrs(<id>) <+ ![]> attrs;
      symbol' := <symbol-to-sdf3> symbol  
    with 
      c := <getfirst(lift-constr)> a*;
      a'* := <remove-all(?sdf-cons(_) + ?Constructor(_))> a* ;
      result := SortConsRef(symbol, c)
    <+  debug(!"Production does not have a constructor, conversion failed: ") 
 
 
  //Productions
 //regular sdf2 productions that define a sort become sdf3 productions with or without constructors       
  prod-to-sdf3:
    prod(symbols*, sort(s), attrs) -> [<term-translation> result, p*]
    where
      not(<?[sort("CONTENTCOMPLETE")]> symbols*)
    with
      a* := <?attrs(<id>) <+ ![]> attrs;
      symbols'* := <filter(symbol-to-sdf3)> symbols*;
      p* := <filter(new-prods)> symbols*
    with      
      c := <getfirst(lift-constr)> a*;
      a'* := <remove-all(?sdf-cons(_) + ?Constructor(_))> a* ;
      
      result := SdfProductionWithCons(SortCons(SortDef(s), c), Rhs(symbols'*), Attrs(a'*))
    <+  result := SdfProduction(SortDef(s), Rhs(symbols'*), Attrs(a*)) 
  
  
  //Lexical kernel sdf2 productions that define a sort become sdf3 productions with or without constructors       
  prod-to-sdf3:
    prod(symbols*, lex(sort(s)), attrs) -> [<term-translation> result, p*]
    with
      a* := <?attrs(<id>) <+ ![]> attrs;
      symbols'* := <filter(symbol-to-sdf3)> symbols*;
      p* := <filter(new-prods)> symbols*
    with 
      c := <getfirst(lift-constr)> a*;
      a'* := <remove-all(?sdf-cons(_) + ?Constructor(_))> a* ;
      result := SdfProductionWithCons(SortCons(Lex(SortDef(s)), c), Rhs(symbols'*), Attrs(a'*))
    <+  result := SdfProduction(Lex(SortDef(s)), Rhs(symbols'*), Attrs(a*)) 
  
  //Cf kernel sdf2 productions that define a sort become sdf3 productions with or without constructors      
  prod-to-sdf3:
    prod(symbols*, cf(sort(s)), attrs) -> [<term-translation> result, p*]
    with
      a* := <?attrs(<id>) <+ ![]> attrs;
      symbols'* := <filter(symbol-to-sdf3)> symbols*;
      p* := <filter(new-prods)> symbols*
    with 
      c := <getfirst(lift-constr)> a*;
      a'* := <remove-all(?sdf-cons(_) + ?Constructor(_))> a* ;
      result := SdfProductionWithCons(SortCons(Cf(SortDef(s)), c), Rhs(symbols'*), Attrs(a'*))
    <+  result := SdfProduction(Cf(SortDef(s)), Rhs(symbols'*), Attrs(a*)) 
  
  
  //regular sdf2 productions with complex symbols on the lhs become sdf3 productions with or without constructors       
  prod-to-sdf3:
    prod(symbols*, symbol, attrs) -> [<term-translation> result, p*]
    where
      not(<?sort(s) + ?cf(sort(s)) + ?lex(sort(s))> symbol)
    with
      a* := <?attrs(<id>) <+ ![]> attrs;
      symbols'* := <filter(symbol-to-sdf3)> symbols*;
      symbol' := <symbol-to-sdf3> symbol;
      p* := <topdown(try(new-prods))> symbols*    
    with 
      c := <getfirst(lift-constr)> a*;
      a'* := <remove-all(?sdf-cons(_) + ?Constructor(_))> a* ;
      result := SdfProductionWithCons(SortCons(symbol', c), Rhs(symbols'*), Attrs(a'*))
    <+  result := SdfProduction(symbol', Rhs(symbols'*), Attrs(a*)) 
  
  
  symbol-to-sdf3:
    symbol -> symbol'
    where
      not(is-unsupported);
      not(?iter(_) + ?iter-star(_) + ?iter-star-sep(_, _) + ?iter-sep(_, _) + ?opt(_))  
    with
      symbol' := <try(terms-to-sdf <+ special-term-to-sdf <+ term-to-sdf )> symbol
      
  symbol-to-sdf3:
    iter(x) -> Iter(<try(symbol-to-sdf3)> x) 
    
  symbol-to-sdf3:
    iter-star(x) -> IterStar(<try(symbol-to-sdf3)> x)   
    
  symbol-to-sdf3:
    iter-sep(x, lit) -> IterSep(<try(symbol-to-sdf3)> x, <try(terms-to-sdf <+ special-term-to-sdf <+ term-to-sdf )> lit)    
    
  symbol-to-sdf3:
    iter-star-sep(x, lit) -> IterStarSep(<try(symbol-to-sdf3)> x, <try(terms-to-sdf <+ special-term-to-sdf <+ term-to-sdf )> lit)  
  
  symbol-to-sdf3:
    opt(x) -> Opt(<try(symbol-to-sdf3)> x)  
    
  symbol-to-sdf3:
    symbol -> symbol'
    where
      is-unsupported
    with
      symbol' := <lift-symbol> symbol
  
  lift-symbol:
    a@alt(s1, s2) -> newsymbol
    with
      newsymbol := Sort(<to-sort-name> a)
  
  lift-symbol:
    empty() -> newsymbol
    with
      newsymbol := Sort($[Empty]) 
      
  lift-symbol:
    seq(head, tail*) -> newsymbol
    with
      newsymbol := Sort($[Seq[<next-counter> "SDF3"]])
 
  lift-symbol:
    tuple(head, rest*) -> newsymbol
    with
      newsymbol := Sort($[Tup[<next-counter> "SDF3"]])
      
  lift-symbol:
    func(args*, result) -> newsymbol
    with
      newsymbol := Sort($[Func[<next-counter> "SDF3"]])
      
  lift-symbol:
    strategy(sleft, sright) -> newsymbol
    with
      newsymbol := Sort($[Strategy[<next-counter> "SDF3"]])   
      
  to-sort-name:
    sort(x) -> x    
    
  to-sort-name:
    opt(x) -> $[[x]Opt]
    
  to-sort-name:
    iter(x) -> $[[x]Plus]
    
  to-sort-name:
    iter-star(x) -> $[[x]Star]  
      
  to-sort-name:
    iter-star-sep(x, lit) -> $[[x]StarSep]
    
  to-sort-name:
    iter-sep(x, lit) -> $[[x]PlusSep]
    
  to-sort-name:
    alt(x, y) -> <concat-strings> [<to-sort-name> x, "Or", <to-sort-name> y]    
    
  new-prods:
    iter(x) -> <new-prods> x
    
  new-prods:
    iter-star(x) -> <new-prods> x   
    
  new-prods:
    iter-sep(x, lit) -> <new-prods> x   
    
  new-prods:
    iter-star-sep(x, lit) -> <new-prods> x  
  
  new-prods:
    opt(x) -> <new-prods> x  
      
  new-prods:
    a@alt(s1, s2) -> [<prod-to-sdf3> prod([s1], sort(<to-sort-name> a), no-attrs()), <prod-to-sdf3> prod([s2], sort(<to-sort-name> a), no-attrs())]   
  
  new-prods:
    empty() -> <prod-to-sdf3> prod([], sort("Empty"), no-attrs())
    
  new-prods:
    seq(head, tail*) -> <prod-to-sdf3> prod([head, tail*], sort($[Seq[<get-counter> "SDF3"]]), attrs([sdf-cons("\"Seq\"")]))  
    
  new-prods:
    tuple(head, rest*) -> <prod-to-sdf3> prod([lit("\"<\""), tuple*, lit("\">\"")], sort($[Tup[<get-counter> "SDF3"]]), attrs([sdf-cons("\"Tuple\"")]))
  with
    tuple* := <separate-by(|lit("\",\""))> [head, rest*]
    
  new-prods:
    func(args*, result) -> <prod-to-sdf3> prod([args*, lit("\"=>\""), result], sort($[Func[<get-counter> "SDF3"]]), attrs([sdf-cons("\"Func\"")]))  
  
  new-prods:
    strategy(sleft, sright) -> <prod-to-sdf3> prod([sleft, lit("\"->\""), sright], sort($[Strategy[<get-counter> "SDF3"]]), attrs([sdf-cons("\"Strategy\"")]))
  
 rules //conversion of SDF3 terms into SDF2
  
  term-translation = topdown(try(terms-to-sdf <+ special-term-to-sdf <+ term-to-sdf ))
  
  //regular constructor conversion
  term-to-sdf:
    cons#(args) -> cons'#(args)
    with
      [f|fs] := <explode-string> cons;
      cons' := <implode-string> [<to-upper> f|fs]
      
  //special constructors conversion   
  special-term-to-sdf:
    iter-sep(sort, lit) -> IterSep(sort, lit) 
    
  special-term-to-sdf:
    iter-star(sort) -> IterStar(sort)
    
  special-term-to-sdf:
    simple-charclass(sort) -> Simple(sort) 
    
  special-term-to-sdf:
    char-class(sort) -> CharClass(sort) 
    
  special-term-to-sdf:
    label_start() -> LabelStart()
    
 
  special-term-to-sdf:
    unquoted-fun(s) -> UnquotedFun(s)
  
  special-term-to-sdf:
    quoted-fun(s) -> QuotedFun(s)
  
  
  special-term-to-sdf:
    non-assoc() -> NonAssoc()
    
  special-term-to-sdf:
    with-arguments(g, a) -> WithArguments(g, a)
  
  special-term-to-sdf:
    non-transitive(g) -> NonTransitive(g) 
  
  special-term-to-sdf:
    real-con(i, n, o) -> RealCon(i, n, o)
  
  special-term-to-sdf:
    iter-star-sep(sort, sep)  -> IterStarSep(sort, sep)
  
  special-term-to-sdf:
     file-start() -> FileStart()
    
  special-term-to-sdf:
     parameterized-sort(sort, sym) -> ParameterizedSort(sort, sym)
           
  special-term-to-sdf:
    ci-lit(lit) -> CiLit(lit)
  
  special-term-to-sdf:
    no-attrs() -> NoAttrs()
  
  special-term-to-sdf:
    attrs([]) -> NoAttrs()
    
  special-term-to-sdf:
    Attrs([]) -> NoAttrs()
    
  special-term-to-sdf:
    seq(h, tl) -> Sequence(h, tl)
    where
        <is-list> tl  
  
  special-term-to-sdf:
    seq(h, la) -> Seq(h, la)
    where
        <not(is-list)> la   
  
  special-term-to-sdf:
    term(default(fun(unquoted("deprecated")))) -> Deprecated() 
    
  special-term-to-sdf:
    term(default(appl(unquoted("deprecated"), [fun(quoted(s))]))) -> Deprecated(s)  
 
 //unsupported symbols in SDF3
  unsupported-symbol:
    <is-unsupported> -> <fail>
  with
    debug(!"Unsupported symbol ") 
            
  terms-to-sdf:
    [term | tail] -> <id>
      
  terms-to-sdf:
    [] -> []
      
 lift-constr:
    Constructor(c) -> Constructor(<un-double-quote; try(to-first-upper)> c)
    
 lift-constr:     
  sdf-cons(c) ->  Constructor(<un-double-quote; try(to-first-upper)> c)
  
 lift-constr:
  sdf-cons-norm(c) ->   Constructor(<un-double-quote; try(to-first-upper)> c)
  
 to-first-upper:
  name -> name'
 where
  [f|fs] := <explode-string> name;
    name' := <implode-string> [<to-upper> f|fs] 
    
 is-unsupported = ?alt(_, _) + ?empty() + ?seq(_,_) + ?tuple(_,_) + ?func(_,_) + ?strategy(_,_) + 
           ?Alt(_, _)  + ?Seq(_,_)
