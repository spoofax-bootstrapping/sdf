module to-template

imports  
  signatures/TemplateLang-sig
  signatures/aliases/Aliases-sig
  signatures/aterms/Aterms-sig
  signatures/basic/Basic-sig
  signatures/characterclass/Character-sig
  signatures/characterclass/Character-Class-sig
  signatures/constants/RealCon-sig
  signatures/grammar/Grammars-sig
  signatures/kernel/Kernel-sig
  signatures/labels/Labels-sig
  signatures/layout-constraints/Layout-Constraints-sig
  signatures/lifting/Lifting-sig
  signatures/literals/Literals-sig
  signatures/modules/Modules-sig
  signatures/priority/Priority-sig
  signatures/regular/Regular-sig
  signatures/renaming/Renaming-sig
  signatures/restrictions/Restrictions-sig
  signatures/sdf2-core/Sdf2-sig
  signatures/sdf2-core/Sdf2-Syntax-sig
  signatures/sorts/Sorts-sig
  signatures/symbols/Symbols-sig
  signatures/symbols/Start-Symbols-sig


rules // Convert regular productions to desugared syntax templates
  
  module-to-template:
    Module(m, i*, sections*) -> Module(m, i*, sections'*)
    with
      sections'* := <map(try(section-to-template))> sections*
    
  section-to-template:
    SDFSection(ContextFreeSyntax(p*)) -> SDFSection(ContextFreeSyntax(p'*))
    with
      p'* := <map(try(is-injection-production + contains-escaped-layout <+ prod-to-template; make-angled)); bottomup(try(escape-brackets))> p*
    
  is-injection-production:
    SdfProductionWithCons(SortCons(SortDef(s), c), Rhs(symbols*), attrs) -> <id>
    where
      <?[Sort(_)] + ?[]> symbols*       
    
  is-injection-production:
    SdfProduction(SortDef(s), Rhs(symbols*), attrs) -> <id>
    where
      <?[Sort(_)] + ?[]> symbols*
        
  contains-escaped-layout :
    SdfProductionWithCons(SortCons(SortDef(s), c), Rhs(symbols*), attrs) -> <id>
    where
      literals := <filter(?Lit(<id>))> symbols*;
      <filter(string-contains-escaped-layout); not(?[])> literals
  
  contains-escaped-layout :
    SdfProduction(SortDef(s), Rhs(symbols*), attrs) -> <id>
    where
      literals := <filter(?Lit(<id>))> symbols*;
      <filter(string-contains-escaped-layout); not(?[])> literals
  
  prod-to-template:
    SdfProductionWithCons(SortCons(SortDef(s), c), Rhs(symbols*), attrs) ->
    TemplateProductionWithCons(SortCons(SortDef(s), c), Template([Line([elem*])]), Attrs(a*))
    where
      a* := <?Attrs(<id>) <+ ![]> attrs
    where
      elem* := <map(symbol-to-elem);
                separate-by(|Layout(" "))> symbols*
    
  prod-to-template:
    SdfProduction(SortDef(s), Rhs(symbols*), attrs) ->
    TemplateProduction(SortDef(s), Template([Line([elem*])]), Attrs(a*))
    where
      a* := <?Attrs(<id>) <+ ![]> attrs
    where
      elem* := <map(symbol-to-elem);
                separate-by(|Layout(" "))> symbols*            
    
  cf-prod-to-template:
    SdfProduction(Cf(SortDef(s)), Rhs(symbols*), attrs) -> 
        TemplateProduction(SortDef(s), Template([Line([elem*])]), Attrs(a*))
    with
      a* := <?Attrs(<id>) <+ ![]> attrs
    with
      elem* := <map(symbol-to-elem)> symbols*
    
  cf-prod-to-template:
    SdfProductionWithCons(SortCons(Cf(SortDef(s)), c), Rhs(symbols*), attrs) -> 
        TemplateProductionWithCons(SortCons(SortDef(s), c), Template([Line([elem*])]), Attrs(a*))
    with
      a* := <?Attrs(<id>) <+ ![]> attrs
    with
      elem* := <map(symbol-to-elem)> symbols*

    
  symbol-to-elem:
    <Cf(Layout()) + Lex(Layout())> -> Layout(" ")
      
  symbol-to-elem:
    Lex(s) -> <symbol-to-elem> s
    
  symbol-to-elem:
    Cf(s) -> <symbol-to-elem> s
    
  symbol-to-elem:
    Opt(<?Lex(t@Sort(_)) + ?Cf(t@Sort(_))>) -> Placeholder(Opt(t), NoOptions())
   
  symbol-to-elem:
    IterStar(<?Lex(t@Sort(_)) + ?Cf(t@Sort(_))>) -> Placeholder(IterStarSep(t, Lit("\"\"")), NoOptions())
   
  symbol-to-elem:
    Iter(<?Lex(t@Sort(_)) + ?Cf(t@Sort(_))>) -> Placeholder(IterSep(t, Lit("\"\"")), NoOptions())
   
  symbol-to-elem:
    IterStarSep(<?Lex(t@Sort(_)) + ?Cf(t@Sort(_))>, Lit(s)) -> Placeholder(IterStarSep(t, Lit(kernelsep)), NoOptions())
    with
      s'        := <un-double-quote> s;
      kernelsep := <double-quote> $[[s']_from_kernel]
   
  symbol-to-elem:
    IterSep(<?Lex(t@Sort(_)) + ?Cf(t@Sort(_))>, Lit(s)) -> Placeholder(IterSep(t, Lit(kernelsep)), NoOptions())
    with
      s'        := <un-double-quote> s;
      kernelsep := <double-quote> $[[s']_from_kernel]
        
  symbol-to-elem:
    Lit(t) -> String(<un-double-quote; unescape> t)
    
  symbol-to-elem:
    CiLit(s) -> String(<un-single-quote> s)
    
  symbol-to-elem:
    Label(l, s) -> Placeholder(Label(l, s), NoOptions())
    where
      <oncetd(?Sort(_))> s
  
  symbol-to-elem:
    Label(l, s) -> <symbol-to-elem> s
    where
      not(<oncetd(?Sort(_))> s) 
    
  symbol-to-elem:
    t@Sort(_) -> Placeholder(t, NoOptions())
     
  symbol-to-elem:
    opt@Opt(Sort(_)) -> Placeholder(opt, NoOptions())
     
  symbol-to-elem:
    iterstar@IterStar(Sort(_)) -> Placeholder(iterstar, NoOptions())
   
  symbol-to-elem:
    iter@Iter(Sort(_)) -> Placeholder(iter, NoOptions())
  
  symbol-to-elem:
    iterStarSep@IterStarSep(Sort(_), Lit(s)) -> Placeholder(iterStarSep, NoOptions())
    with
      s' := <un-double-quote; unescape> s
   
  symbol-to-elem:
    iterSep@IterSep(Sort(_), Lit(_)) -> Placeholder(iterSep, NoOptions())
  
  escape-brackets :
    String(s) -> String(s')
    with
      s' := <string-replace(|">","\\>"); string-replace(|"<","\\<")> s  
  
  make-angled :
    TemplateProductionWithCons(sc, Template([Line(elem*)]), a) -> TemplateProductionWithCons(sc, Template([Line(elem'*)]), a)
    with
      elem'* := <map(try(angle-placeholder))> elem*
    
  make-angled : 
    TemplateProduction(s, Template([Line(elem*)]), a) -> TemplateProduction(s, Template([Line(elem'*)]), a)
    with
      elem'* := <map(try(angle-placeholder))> elem*
  
  angle-placeholder :
    p@Placeholder(_, _) -> Angled(p)
         
  string-contains-escaped-layout =
    is-substring(!"\\t") + is-substring(!"\\r") + is-substring(!"\\n")
  