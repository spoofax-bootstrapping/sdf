module editor/builders

imports

  libstrc
  libstratego-sdf
  libstratego-lib
  libstratego-gpp
  libstratego-sglr
  lib/sdf-desugar
  lib/sdf-parenthesize
  signatures/TemplateLang-sig
  analysis/desugar
  stratego/metaborg
  trans/pp
  runtime/index/-
  runtime/task/-
  generation/-
  names/analysis/names
  runtime/nabl/-
  runtime/properties/-
  normalization/to-normal-form
  lib/ds/pp/-
  normalization/to-parse-table
  normalization/refactor-pt
  pp/EditorService-pp
  pp/EditorService-parenthesize
  
rules
    
  generate-sdf-abstract:
    (selected, position, ast, path, project-path) -> (filename, result)
    where
      <?Module(Unparameterized(m), i*, sections)> ast ;
      m' := <strip-annos; string-tokenize(|['/']); last> m;
        <base-filename; remove-extension; ?m' <+ debug(!"Module name does not correspond to file name. The sdf file could not be generated.\n"); fail> path
    with
      <?Module(Unparameterized(mn), i*, sections)> ast ;
      chars := <collect-one(?Tokenize(<id; explode-string; un-double-quote-chars>)) <+ !['(', ')']> sections;
      newline := <collect-one(?Newlines(<id>)) <+ !None()> sections;
      kfr := <collect-one(?KeywordFollowRestriction(<id; term-translation>)) <+ !None()> sections;
      selected'     := <desugar-templates> selected;
      //selected' := selected ;
      filename := <create-src-gen(|project-path, "syntax",  ".sdf.aterm")> mn;
      result := <to-sdf(|chars, newline, kfr)> selected'

  generate-sdf-concrete:
    (selected, position, ast, path, project-path) -> (filename, result)
   where
      <?Module(Unparameterized(m), i*, sections)> ast ;
      m' := <strip-annos; string-tokenize(|['/']); last> m;
        <base-filename; remove-extension; ?m' <+ debug(!"Module name does not correspond to file name. The sdf file could not be generated.\n"); fail> path
   where
       <?Module(Unparameterized(mn), i*, sections)> ast ;
      chars := <collect-one(?Tokenize(<id; explode-string; un-double-quote-chars>)) <+ !['(', ')']> sections;
      newline := <collect-one(?Newlines(<id>)) <+ !None()> sections;
      kfr := <collect-one(?KeywordFollowRestriction(<id; term-translation>)) <+ !None()> sections;
      selected'     := <desugar-templates> selected;
        //selected' := selected ;
        filename := <create-src-gen(|project-path, "syntax", ".sdf")> mn;
     //   result   := <sdf-aterm; pp-sdf-to-string <+ !""; debug(!"The sdf file could not be generated.\n"); fail>
       result   := <to-sdf(|chars, newline, kfr); pp-sdf-to-string <+ !""; debug(!"The sdf file could not be generated.\n"); fail> selected'


  generate-sig-abstract:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      <?Module(Unparameterized(mn), i*, _)> ast ;
      selected'     := <desugar-templates> selected;

      result   := <module-to-sig> selected'
      ; filename := <create-src-gen(|project-path, "signatures", ".sig.aterm")> mn



  generate-sig-concrete:
    (selected, position, ast, path, project-path) -> (filename, result)
    where
      <?Module(Unparameterized(m), i*, sections)> ast ;
      m' := <strip-annos; string-tokenize(|['/']); last> m;
        <base-filename; remove-extension; ?m' <+ debug(!"Module name does not correspond to file name. The signature file could not be generated.\n"); fail> path
    where
      <?Module(Unparameterized(mn), i*, _)> ast ;
      selected'     := <desugar-templates> selected;
      result   := <module-to-sig; pp-stratego-string <+ !""; debug(!"The signature file could not be generated. Try Reset and Reanalyze or check for unresolved references.\n"); fail> selected'
      ; filename := <create-src-gen(|project-path, "signatures", "-sig.str")> mn


   generate-dynsem:
         (selected, position, ast, path, project-path) -> (filename, result)
    where
      <?Module(Unparameterized(m), i*, sections)> ast ;
      m' := <strip-annos; string-tokenize(|['/']); last> m;
        <base-filename; remove-extension; ?m' <+ debug(!"Module name does not correspond to file name. The ds signature file could not be generated.\n"); fail> path
    where
      <?Module(Unparameterized(mn), i*, _)> ast ;
      selected'     := <desugar-templates> selected;
      result   := <module-to-ds-sig; pp-ds-to-string  <+ !""; debug(!"The signature file could not be generated. Try Reset and Reanalyze or check for unresolved references.\n"); fail> selected'
      ; filename := <create-src-gen(|project-path, "ds-signatures", "-sig.ds")> mn

   generate-dynsem-abstract:
         (selected, position, ast, path, project-path) -> (filename, result)
    where
      <?Module(Unparameterized(m), i*, sections)> ast ;
      m' := <strip-annos; string-tokenize(|['/']); last> m;
        <base-filename; remove-extension; ?m' <+ debug(!"Module name does not correspond to file name. The ds signature file could not be generated.\n"); fail> path
    where
      <?Module(Unparameterized(mn), i*, _)> ast ;
      selected'     := <desugar-templates> selected;
      result   := <module-to-ds-sig> selected'
      ; filename := <create-src-gen(|project-path, "ds-signatures/ds", "-dssig.aterm")> mn

   generate-pp-abstract:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      <?Module(Unparameterized(mn), i*, _)> ast ;
      selected'     := <desugar-templates> selected;
      result   :=  <module-to-pp> selected'
     // ; fn       :=  <get-filename> mn
      ; filename := <create-src-gen(|project-path, "pp", ".pp.aterm")> mn//fn

   generate-pp-concrete:
    (selected, position, ast, path, project-path) -> (filename, result)
    where
      <?Module(Unparameterized(m), i*, sections)> ast ;
      m' := <strip-annos; string-tokenize(|['/']); last> m;
        <base-filename; remove-extension; ?m' <+ debug(!"Module name does not correspond to file name. The pp file could not be generated.\n"); fail> path
    where
      <?Module(Unparameterized(mn), i*, _)> ast ;
      selected'     := <desugar-templates> selected;
      result   := <module-to-pp; pp-stratego-string <+ !""; debug(!"The pp file could not be generated. Try Reset and Reanalyze or check for unresolved references.\n"); fail> selected'
      //; fn       :=  <get-filename> mn
      ; filename := <create-src-gen(|project-path, "pp", "-pp.str"); debug(!"filename ")> mn//fn

  generate-ast-checker-concrete:
    (selected, position, ast, path, project-path) -> (filename, result)
    where
      <?Module(Unparameterized(m), i*, sections)> ast ;
      m' := <strip-annos; string-tokenize(|['/']); last> m;
        <base-filename; remove-extension; ?m' <+ debug(!"Module name does not correspond to file name. The ast checker file could not be generated.\n"); fail> path
    where
      <?Module(Unparameterized(mn), i*, _)> ast ;
      selected'     := <desugar-templates> selected;
      result   := <module-to-chk; pp-stratego-string <+ !""; debug(!"The check file could not be generated. Try Reset and Reanalyze or check for unresolved references.\n"); fail> selected'
      //; fn       :=  <get-filename> mn
      ; filename := <create-src-gen(|project-path, "check", "-chk.str")> mn

   generate-ast-checker-abstract:
    (selected, position, ast, path, project-path) -> (filename, result)
    where
      <?Module(Unparameterized(m), i*, sections)> ast ;
      m' := <strip-annos; string-tokenize(|['/']); last> m;
        <base-filename; remove-extension; ?m' <+ debug(!"Module name does not correspond to file name. The ast checker file could not be generated.\n"); fail> path
    where
      <?Module(Unparameterized(mn), i*, _)> ast ;
      selected'     := <desugar-templates> selected;
      result   := <module-to-chk> selected'
      //; fn       :=  <get-filename> mn
      ; filename := <create-src-gen(|project-path, "check", "-chk.aterm")> mn


  generate-esv-abstract:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      <?Module(Unparameterized(mn), i*, _)> ast ;
      selected'     := <desugar-templates> selected;
      result   :=  <module-to-esv; topdown(try(pp-fix-string-quotes))> selected'
      ; filename := <create-src-gen(|project-path, "completions", ".esv.aterm")> mn

   generate-esv-concrete:
    (selected, position, ast, path, project-path) -> (filename, result)
    where
      <?Module(Unparameterized(m), i*, sections)> ast ;
      m' := <strip-annos; string-tokenize(|['/']); last> m;
        <base-filename; remove-extension; ?m' <+ debug(!"Module name does not correspond to file name. The esv file could not be generated.\n"); fail> path
    where
      <?Module(Unparameterized(mn), i*, sections)> ast ;
      selected'     := <desugar-templates> selected;
      result   := <module-to-esv; pp-esv-to-string <+ !""; debug(!"The esv file could not be generated. Try Reset and Reanalyze or check for unresolved references.\n")> selected'
      ; filename := <create-src-gen(|project-path, "completions" ,"-esv.esv")> mn


  lift-sdf3-abstract:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      <?Module(Unparameterized(mn), i*, sections)> ast ;
      result   := <bottomup(try(sugar-attributes); try(sugar-priorities))> ast;
      filename := <create-src-gen(|project-path, "formatted", ".aterm")> mn
  
  pp-sdf3:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      <?Module(Unparameterized(mn), i*, sections)> ast ;
      result   := <pp-SDF3-string> ast;
      filename := <create-src-gen(|project-path, "formatted", ".sdf3")> mn

  lift-sdf3:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      <?Module(Unparameterized(mn), i*, sections)> ast ;
      result   := <bottomup(try(sugar-attributes); try(sugar-priorities)); pp-SDF3-string> ast;
      filename := <create-src-gen(|project-path, "formatted", ".sdf3")> mn
        
  lift-sdf3-template-abstract:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      <?Module(Unparameterized(mn), i*, sections)> ast ;
      result   := <module-to-template> ast;
      filename := <create-src-gen(|project-path, "formatted", ".aterm")> mn

   lift-sdf3-template:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      <?Module(Unparameterized(mn), i*, sections)> ast ;
      result   := < module-to-template;bottomup(try(sugar-attributes);try(sugar-priorities)); pp-SDF3-string> ast;
      filename := <create-src-gen(|project-path, "formatted", ".sdf3")> mn    
      
  extract-regular-productions:    
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      <?Module(Unparameterized(mn), i*, sections)> ast ;
      chars := <collect-one(?Tokenize(<id; explode-string; un-double-quote-chars>)) <+ !['(', ')']> sections;
      result   := <desugar-templates; remove-templates(|chars); bottomup(try(sugar-attributes); try(sugar-priorities)); pp-SDF3-string> ast;
      filename := <create-src-gen(|project-path, "formatted", ".sdf3")> mn    
    
  extract-regular-productions-abstract:   
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      <?Module(Unparameterized(mn), i*, sections)> ast ;
      chars := <collect-one(?Tokenize(<id; explode-string; un-double-quote-chars>)) <+ !['(', ')']> sections;
      result   := <desugar-templates; remove-templates(|chars); bottomup(try(sugar-attributes); try(sugar-priorities))> ast;
      filename := <create-src-gen(|project-path, "formatted", ".aterm")> mn 
      
  sdf3-to-normal-form-sdf:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
    normalized   := <to-normal-form(|$[[project-path]/[<dirname> path]])> selected;
    <?Module(Unparameterized(mn), i*, sections)> ast ;
    chars := <collect-one(?Tokenize(<id; explode-string; un-double-quote-chars>)) <+ !['(', ')']> sections;
    newline := <collect-one(?Newlines(<id>)) <+ !None()> sections;
    kfr := <collect-one(?KeywordFollowRestriction(<id; term-translation>)) <+ !None()> sections;
    result := <to-sdf(|chars, newline, kfr); pp-sdf-to-string <+ !""; debug(!"The sdf file could not be generated.\n"); fail> normalized;
    filename := <create-src-gen(|project-path, "syntax",  "-normalized.sdf")> mn

  sdf3-to-normal-form:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
    <?Module(Unparameterized(mn), i*, sections)> ast ;
    filename := <create-src-gen(|project-path, "syntax",  "-normalized.sdf3")> mn;
    result   := <to-normal-form(|$[[project-path]/[<dirname> path]]); pp-SDF3-string> selected  
    
  sdf3-to-normal-form-abstract:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
    <?Module(Unparameterized(mn), i*, sections)> ast ;
    filename := <create-src-gen(|project-path, "syntax",  "-normalized.aterm")> mn;
    result   := <to-normal-form(|$[[project-path]/[<dirname> path]])> selected
  
  generate-item-sets:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
    <?Module(Unparameterized(mn), i*, sections)> ast ;
      filename := <create-src-gen(|project-path, "parse-table",  ".aterm")> "item-sets" ;
    result   := <to-item-sets <+ debug(!"Grammar is not normalized "); fail> selected

  generate-parse-table:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
    <?Module(Unparameterized(mn), i*, sections)> ast ;
      filename := <create-src-gen(|project-path, "parse-table",  "-parse-table.tbl")> mn;
    result   := <to-parse-table <+ debug(!"Grammar is not normalized "); fail > selected
  
  generate-parse-table-sdf2table-format:
    (selected, position, ast, path, project-path) -> (filename, result')
    with
        <?Module(Unparameterized(mn), i*, sections)> ast ;
        filename := <create-src-gen(|project-path, "parse-table",  "-parse-table.tbl")> mn;
        ref-file := <remove-extension> path;
        reference-pt := <ReadFromFile> $[[ref-file]-reference.tbl];
        result   := <to-parse-table <+ debug(!"Grammar is not normalized "); fail > selected;
        result' := <refactor-pt(|reference-pt)> result
  
  normalize-and-generate-pt:
    (selected, position, ast, path, project-path) -> (filename, result)
    where
        <?Module(Unparameterized(mn), i*, sections)> ast ;
        filename := <create-src-gen(|project-path, "syntax",  "-parse-table.tbl")> mn;
        result   := <to-normal-form(|$[[project-path]/[<dirname> path]]); to-parse-table> selected
  
  generate-new-completions-colorer:
    (selected, position, ast, path, project-path) -> (filename, result)
    where
        <?Module(Unparameterized(mn), i*, sections)> ast ;
        ast'     := <desugar-templates> selected;
        filename := <create-src-gen(|project-path, "completion/colorer" ,"-cc-esv.esv")> mn;
        result   := <module-to-cmp-colorer; pp-esv-to-string <+ !""; debug(!"ESV files could not be generated. Try Reset and Reanalyze or check for unresolved references.\n"); fail> ast'
        
  generate-new-completions-stratego:
    (selected, position, ast, path, project-path) -> (filename, result)
    where
        <?Module(Unparameterized(mn), i*, sections)> ast ;
        ast'     := <desugar-templates> selected;
        result   := <module-to-new-cmp; pp-stratego-string <+ !""; debug(!"New Completions files could not be generated. Try Reset and Reanalyze or check for unresolved references.\n"); fail> ast';
        filename := <create-src-gen(|project-path, "completion", "-cp.str")> mn
  
  generate-permissive-abstract:
    (selected, position, ast, path, project-path) -> (filename, result)
    where
        <?Module(Unparameterized(mn), i*, sections)> ast ;
        filename := <create-src-gen(|project-path, "syntax/permissive" ,"-Permissive-Custom.aterm")> mn;
        ast'     := <desugar-templates> selected;
        result := <module-to-permissive(|$[[project-path]/[<dirname> path]])> ast'
  
  generate-permissive-concrete:
    (selected, position, ast, path, project-path) -> (filename, result)
    where
        <?Module(Unparameterized(mn), i*, sections)> ast ;
        filename := <create-src-gen(|project-path, "syntax/permissive" ,"-Permissive-Custom.sdf3")> mn;
        ast'     := <desugar-templates> selected;
        result   := <module-to-permissive(|$[[project-path]/[<dirname> path]]); pp-SDF3-string> ast'
         
  
  // On-save handler
  generate-all:
    (selected, position, ast, path, project-path) -> None()
    with
        filename := <base-filename> path;
        ast'     := <desugar-templates> ast;
        <?Module(Unparameterized(mn), i*, sections)> ast 
        where
        esv-cc-filename         := <create-src-gen(|project-path, "completion/colorer" ,"-cc-esv.esv")> mn;
        esv-cc-ast              := <module-to-cmp-colorer; pp-esv-to-string <+ !""; debug(!"ESV files could not be generated. Try Reset and Reanalyze or check for unresolved references.\n"); fail> ast';
        <write-string-to-file> (esv-cc-filename, esv-cc-ast)   
    where
      ncp-ast              := <module-to-new-cmp; pp-stratego-string <+ !""; debug(!"New Completions files could not be generated. Try Reset and Reanalyze or check for unresolved references.\n"); fail> ast';
      ncp-filename         := <create-src-gen(|project-path, "completion", "-cp.str")> mn;
      <write-string-to-file> (ncp-filename, ncp-ast)             
    where
      sig-ast              := <module-to-sig; pp-stratego-string <+ !""; debug(!"Signature files could not be generated. Try Reset and Reanalyze or check for unresolved references.\n"); fail> ast';
      sig-filename         := <create-src-gen(|project-path, "signatures", "-sig.str")> mn;
      <write-string-to-file> (sig-filename, sig-ast)
    where
      ds-sig-ast           := <module-to-ds-sig; pp-ds-to-string  <+ !""; debug(!"The ds signature file could not be generated. Try Reset and Reanalyze or check for unresolved references.\n"); fail> ast';
      ds-sig-filename      := <create-src-gen(|project-path, "ds-signatures", "-sig.ds")> mn;
      <write-string-to-file> (ds-sig-filename, ds-sig-ast)
    where
        chars                := <collect-one(?Tokenize(<id; explode-string; un-double-quote-chars>)) <+ !['(', ')']> sections;
        newline              := <collect-one(?Newlines(<id>)) <+ !None()> sections;
        kfr                  := <collect-one(?KeywordFollowRestriction(<id; term-translation>)) <+ !None()> sections;
        sdf-filename         := <create-src-gen(|project-path, "syntax", ".sdf")> mn;
        sdf-ast              := <to-sdf(|chars, newline, kfr); pp-sdf-to-string <+ !""; debug(!"SDF files could not be generated.\n"); fail > ast';
        <write-string-to-file> (sdf-filename, sdf-ast)  
    where
        pp-ast               := <module-to-pp; pp-stratego-string <+ !""; debug(!"PP files could not be generated. Try Reset and Reanalyze or check for unresolved references.\n"); fail> ast'
      ; pp-filename          := <create-src-gen(|project-path, "pp", "-pp.str")> mn;
        <write-string-to-file> (pp-filename, pp-ast)  
     where
        chk-ast               := <module-to-chk; pp-stratego-string <+ !""; debug(!"Check files could not be generated. Try Reset and Reanalyze or check for unresolved references.\n"); fail> ast'
      ; chk-filename          := <create-src-gen(|project-path, "check", "-chk.str")> mn;
        <write-string-to-file> (chk-filename, chk-ast)   
  

rules
  
  //pretty-printer for the generated sdf
  pp-sdf-to-string =
  sdf-desugar;
  parenthesize-Sdf2;
  sdf-ppfix;
  ast2box(|[<pp-table-sdf>, PP-Table([PP-Entry(Path1("Constructor"),[Arg("1")])])]);
  box2text-string(|80)


  pp-ds-to-string =
    ds-prettyprint-SDF-start-symbols
    ; !V([], <id>)
    ; box2text-string(|120)

  //pretty-printer for the generated esv
  pp-esv-to-string =
    topdown(try(pp-fix-string-quotes))
    ; parenthesize-EditorService
    ; prettyprint-EditorService 
    ; !V([], <id>)
    ; box2text-string(|120)

  pp-fix-string-quotes:
    String(string) -> String(string')
    where
      <not(string-starts-with(|"\""))> string
    with
      string' := <conc-strings> ("\"", string, "\"")

  pp-fix-string-quotes:
    Placeholder(string) -> Placeholder(string')
    where
      <not(string-starts-with(|"<"))> string
    with
      string' := <conc-strings> ("<", string, ">")
    
    // When given a tuple (path, string) this writes string into path.
    write-string-to-file =
        ?(filename, string);
        if <dirname; readdir> filename then
          with(
            handle := <fopen> (filename, "w");
            <fputs> (string, handle);
            <fclose> handle;
            <refresh-workspace-file> filename
          )
        end
    
    create-src-gen(|project-path, folder, ext):
        filename -> filename'
        with
            fn := <get-filename> filename; 
            src-gen-path := <concat-strings; create-dir> [project-path, "/src-gen"];
            src-gen-folder := <concat-strings; create-dir> [src-gen-path, "/" ,folder];
            file-folder := <get-dir(|src-gen-folder)> filename ;
            filename' := <concat-strings> [file-folder, "/" , fn, ext]
  
    get-dir(|path) :
    s -> s'
    with
      names := <strip-annos; string-tokenize(|['/'])> s;
      names' := <at-last(![])> names;
      if [h | tl] := names'
      then      
        first := <concat-strings> [path, "/" ,h]; 
                <create-dirs(|first)> tl;
                s' := <concat-strings> [path, "/",  <separate-by(|"/"); concat-strings> names']
        else
          s' := path
        end


   create-dir  = not( file-exists ; filemode ; isdir) < mkdir + id

   create-dirs(|dir):
    [h | tl] -> None()
    where
      <create-dir> dir;
      new-dir := <concat-strings> [dir, "/", h];
      <create-dirs(|new-dir)> tl

    create-dirs(|dir):
    [] -> None()
    where
      <create-dir> dir
  
  get-filename :
    s -> s'
    with
      names := <strip-annos; string-tokenize(|['/'])> s;
      s' := <last> names

 sugar-attributes:
  Attrs([]) -> NoAttrs()      
      
