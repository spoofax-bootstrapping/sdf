module editor/build-utils

imports

  lib/ds/pp/-
  libstratego-gpp
  stratego/metaborg
  
  // SDF3
  signatures/TemplateLang-sig
  signatures/kernel/Kernel-sig
  
  // SDF2
  libstratego-sdf
  lib/sdf-desugar
  pp/SDF-pp
  pp/SDF-parenthesize
  
  // ESV
  pp/EditorService-pp
  pp/EditorService-parenthesize
  
rules
  
  //pretty-printer for the generated sdf
  pp-sdf-to-string =
    sdf-desugar;
    parenthesize-SDF;
    sdf-ppfix;
    ast2box(|[<pp-table-sdf>, PP-Table([PP-Entry(Path1("Constructor"),[Arg("1")])])]);
    box2text-string(|80)

  pp-ds-to-string =
    ds-prettyprint-SDF-start-symbols
    ; !V([], <id>)
    ; box2text-string(|120)

  //pretty-printer for the generated esv
  pp-esv-to-string =
    topdown(try(pp-fix-string-quotes))
  ; parenthesize-EditorService
  ; prettyprint-Module 
  ; !V([], <id>)
  ; box2text-string(|120)

  pp-fix-string-quotes:
    String(string) -> String(string')
    where
      <not(string-starts-with(|"\""))> string
    with
      string' := <conc-strings> ("\"", string, "\"")

  pp-fix-string-quotes:
    Placeholder(string) -> Placeholder(string')
    where
      <not(string-starts-with(|"<"))> string
    with
      string' := <conc-strings> ("<", string, ">")

    
    // When given a tuple (path, string) this writes string into path.
    write-string-to-file =
        ?(filename, string);
        if <dirname; readdir> filename then
          with(
            handle := <fopen> (filename, "w");
            <fputs> (string, handle);
            <fclose> handle;
            <refresh-workspace-file> filename
          )
        end
    
    create-src-gen(|project-path, folder, ext):
        filename -> filename'
        with
            fn := <get-filename> filename; 
            src-gen-path := <concat-strings; create-dir> [project-path, "/src-gen"];
            src-gen-folder := <concat-strings; create-dir> [src-gen-path, "/" ,folder];
            file-folder := <get-dir(|src-gen-folder)> filename ;
            filename' := <concat-strings> [file-folder, "/" , fn, ext]
  
    get-dir(|path) :
    s -> s'
    with
      names := <strip-annos; string-tokenize(|['/'])> s;
      names' := <at-last(![])> names;
      if [h | tl] := names'
      then      
        first := <concat-strings> [path, "/" ,h]; 
                <create-dirs(|first)> tl;
                s' := <concat-strings> [path, "/",  <separate-by(|"/"); concat-strings> names']
        else
          s' := path
        end


   create-dir  = not( file-exists ; filemode ; isdir) < mkdir + id

   create-dirs(|dir):
    [h | tl] -> None()
    where
      <create-dir> dir;
      new-dir := <concat-strings> [dir, "/", h];
      <create-dirs(|new-dir)> tl

    create-dirs(|dir):
    [] -> None()
    where
      <create-dir> dir
  
  get-filename :
    s -> s'
    with
      names := <strip-annos; string-tokenize(|['/'])> s;
      s' := <last> names

 sugar-attributes:
  Attrs([]) -> NoAttrs()