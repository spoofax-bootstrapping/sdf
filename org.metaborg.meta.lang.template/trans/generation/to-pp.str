module generation/to-pp

imports
  libstratego-lib
  libstratego-sglr
  libstrc
  signatures/sdf2-core/-
  analysis/desugar
  generation/to-template
  generation/to-str
  templatelang
  
rules

  module-to-pp:
    Module(m, i*, s*) -> Module(m', [i0, i1*, i2*, g1, g2, s'*])
    with
      m'   := <to-str-module-name(|"-pp", "pp")> Module(m)
    ; i0   := Imports([Import("libstratego-gpp"), Import("runtime/tmpl/pp"), Import("libstratego-sglr"), Import(<to-str-module-name(|"-sig","signatures")> Module(m))])
    ; i1*  := <map(to-str-import(|"-sig", "signatures"))> i*
    ; i2*  := <map(to-str-import(|"-pp", "pp"))> i*
    ; lang := <language-spec-name>
    ; g1   := Strategies([ SDefNoArgs($[prettyprint-example], CallNoArgs(SVar($[prettyprint-[lang]])))
                         , SDefNoArgs($[prettyprint-[lang]], Fail())
                         ])
    ; g2   := Strategies([ SDefNoArgs($[prettyprint-SDF-start-symbols], CallNoArgs(SVar($[prettyprint-[lang]-start-symbols])))
                         , SDefNoArgs($[prettyprint-[lang]-start-symbols], Fail())
                         ])
    ; s'*  := <filter(section-to-pp(|lang))> s*

  
  section-to-pp(|lang):
    SDFSection(ContextFreeStartSymbols(s*)) -> Strategies(<not(?[])> [s1*])
    with
       s1* := <map(start-symbol-to-pp(|lang))> s*
  
  section-to-pp(|lang):
    SDFSection(LexicalStartSymbols(s*)) -> Strategies(<not(?[])> [s1*])
    with
       s1* := <map(start-symbol-to-pp(|lang))> s*
     
  section-to-pp(|lang):
    SDFSection(KernelStartSymbols(s*)) ->  Strategies(<not(?[])> [s1*])
    with
       s1* := <map(start-symbol-to-pp(|lang))> s*
     
  start-symbol-to-pp(|lang):
    Sort(x) -> SDefNoArgs($[prettyprint-[lang]-start-symbols], CallNoArgs(SVar($[prettyprint-[x]])))
  
  section-to-pp(|lang):
    SDFSection(LexicalSyntax(p*)) -> Strategies(<not(?[])> [s1*, s2*, s3*])
    with
      sort* := <filter(productive-sort); make-set> p*
      ; s1*    := <map(sort-to-pp)> sort*
      ; s2*    := <map(sort-to-pp(|lang))> sort*
      ; s3*    := <map(sort-to-pp-amb)> sort*
        
  section-to-pp(|lang):
    SDFSection(ContextFreeSyntax(p*)) -> Strategies(<not(?[])> [s1*, s2*, s3*, s4*, cc*])
    with
        //content complete prods
        cc* := < collect(?SortDef(<strip-annos>) <+ ?Sort(<strip-annos>))
             ; nub 
             ; map(sort-to-contentcomplete-pp); flatten-list> p*
    with
      sort* := <filter(productive-sort); make-set> p*
      ; s1*   := <map(sort-to-pp(|lang))> sort*
      ; s2*   := <filter(prod-to-template; desugar-templates;template-to-pp <+ template-to-pp); flatten-list> p*
      ; s3*   := <map(is-sort-fail)> sort*  
      ; s4*   := <map(sort-to-pp-amb)> sort*
          
  section-to-pp(|lang):
    SDFSection(Kernel(p*)) -> Strategies(<not(?[])> [s1*, s2*, s3*, s4*, s5*, s6*])
    with
      sort*            := <filter(cf-productive-sort); make-set> p*
      ; s1*            := <map(sort-to-pp(|lang))> sort*  
      ; s2*            := <filter(cf-prod-to-template; desugar-templates; template-to-pp); flatten-list> p*
      ; s3*            := <map(is-sort-fail)> sort*
      ; lexical-sorts* := <filter(lex-productive-sort); make-set> p*
      ; s4*            := <map(sort-to-pp)> lexical-sorts*
        ; s5*            := <map(sort-to-pp(|lang))> lexical-sorts* 
        ; s6*            := <map(sort-to-pp-amb)> [sort*, lexical-sorts*]  
                 
  section-to-pp(|lang):
    TemplateSection(t*) -> Strategies(<?[_|_]> [s1*, s2*, s3*, s4*])
    with
        sort* := <filter(productive-sort); make-set> t*
      ; s1*   := <map(sort-to-pp(|lang))> sort*
      ; s2*   := <filter(template-to-pp); flatten-list> t*
      ; s3*   := <map(is-sort-fail)> sort*
      ; s4*   := <map(sort-to-pp-amb)> sort*
        
  productive-sort:
    TemplateProduction(SortDef(s), _, Attrs(attrs)) -> s
    where not (
      <fetch-elem(?Reject())> attrs
    )
    
  productive-sort:
    TemplateProductionWithCons(SortCons(SortDef(s), c), _, Attrs(attrs)) -> s
    where not (
      <fetch-elem(?Reject())> attrs
    )
  
  productive-sort:
    SdfProduction(SortDef(s), _, Attrs(attrs)) -> s
    where not (
      <fetch-elem(?Reject())> attrs
    )
    
  productive-sort:
    SdfProductionWithCons(SortCons(SortDef(s),c), _, Attrs(attrs)) -> s
    where not (
      <fetch-elem(?Reject())> attrs
    )  
    
  cf-productive-sort:
    SdfProductionWithCons(SortCons(Cf(SortDef(s)),c), _, Attrs(attrs)) -> s
    where not (
      <fetch-elem(?Reject())> attrs
    )
    
  cf-productive-sort:
    SdfProduction(Cf(SortDef(s)), _, Attrs(attrs)) -> s
    where not (
      <fetch-elem(?Reject())> attrs
    )    
    
  lex-productive-sort:
    SdfProduction(Lex(SortDef(s)), _, Attrs(attrs)) -> s
    where not (
      <fetch-elem(?Reject())> attrs
    )
    
  lex-productive-sort:
    SdfProductionWithCons(SortCons(Lex(SortDef(s)),c), _, Attrs(attrs)) -> s
    where not (
      <fetch-elem(?Reject())> attrs
    )        
    
  sort-to-pp(|lang):
    x -> SDefNoArgs($[prettyprint-[lang]], CallNoArgs(SVar($[prettyprint-[x]])))
  
  sort-to-pp:
    x -> SDefNoArgs($[prettyprint-[x]], Build(NoAnnoList(List([NoAnnoList(Op("S", [RootApp(CallNoArgs(SVar("is-string")))]))]))))
    
  sort-to-pp-amb:
    x -> RDefNoArgs($[prettyprint-[x]], RuleNoCond(NoAnnoList(Op("amb", [NoAnnoList(ListTail([Var("h")], Var("hs")))])), App(CallNoArgs(SVar($[prettyprint-[x]])), Var("h"))))
  
  template-to-pp:
    TemplateProductionWithCons(SortCons(SortDef(s), Constructor(c)), t, Attrs(a*)) ->
      [RDefNoArgs(
        $[prettyprint-[s]]
      , Rule(NoAnnoList(input), NoAnnoList(List(output')), with*)
      ), SDefNoArgs($[is-[s]], Match(NoAnnoList(Op(c, WldArg*)))),
      RDefNoArgs("get-indent", Rule(NoAnnoList(Tuple([ NoAnnoList(input), Var("index")])), Var("indent"), 
      [ WhereClause(SwitchChoice(Build(Var("index")), switch-indent*, Assign(Var("indent"), NoAnnoList(Str("\"\"")))))]))
      , RDefNoArgs("get-separator", Rule(NoAnnoList(Tuple([ NoAnnoList(input), Var("index")])), Var("separator"), 
      [ WhereClause(SwitchChoice(Build(Var("index")), switch-sep*, Assign(Var("separator"), NoAnnoList(Str("\"\"")))))]))
      , RDefNoArgs("get-leading-ws", Rule(NoAnnoList(Tuple([ NoAnnoList(input), Var("index")])), Var("ws"), 
      [ WhereClause(SwitchChoice(Build(Var("index")), switch-ws*, Assign(Var("ws"), NoAnnoList(Str("\"\"")))))]))
      ]
    where
        not(<fetch-elem(?Reject())> a*)
    where
        not(<fetch-elem(?PlaceholderInsertion())> a*)
    where
         not(<fetch-elem(?LiteralCompletion())> a*)
    with
        !t => SingleLineTemplate(elem*) //either line is [Line([Layout(""), elem*])] or a list of TemplateLines
      < line* := [Line([Layout(""), elem*])] 
      + !t => Template(line*)
      with
        <reset-counter> "pp";
        line'*           := <map(introduce-labels-line)> line*;
        output           := <map(template-line-to-stratego)> line'*;
        arg*             := <mapconcat(?Line(<filter(placeholder-to-var)>))> line'*;
        WldArg*          := <map(!Wld())> arg*;
        (output', with*) := <thread-alltd(extract-app)> (output, []);
        input            := Op(c, arg*)
     with
        <reset-counter> "switch";
        switch-indent*   := <map(get-indent-template-line); flatten-list> line'*;
        <reset-counter> "switch";
        switch-sep*      := <map(get-sep-template-line); flatten-list> line'*;
        <reset-counter> "switch";
        <set-current-layout> "";
        switch-ws*       := <map(get-leading-ws-pp); flatten-list> line'*
  
  
  set-current-layout = ?l; rules(current-layout: "current" -> l) 
  
  get-leading-ws-pp:
    Line(elem*) -> switch*
    where
        switch* := <map(get-leading-ws-elems)> elem*;
        cl      := <set-current-layout> <conc-strings> (<current-layout> "current", "\n")
        
  get-leading-ws-elems:
    Layout(l) ->  []
    where
        <set-current-layout> <conc-strings> (<current-layout> "current", l)
      
  get-leading-ws-elems:
    String(l) -> [] 
    where
        <set-current-layout> ""
  
  get-leading-ws-elems:
    Escape(e) ->  []
    where
        <set-current-layout> ""  
    
  get-leading-ws-elems:
    Placeholder(_, _) -> SwitchCase(
                          Match(NoAnnoList(Int($[[<next-counter> "switch"]])))
                        , Assign(Var("ws"), NoAnnoList(Str(current)))
                        )
    where
       current := <current-layout> "current";
       <set-current-layout> ""
  
  get-indent-template-line:
    Line([]) -> []
    
  get-indent-template-line:
    Line([Layout(_)]) -> []  
    
  get-indent-template-line:
    Line(elem*@[h | hs]) -> switch*
    where
        <not(?Layout(_))> h
    with
        switch* := <filter(no-indent-placeholders)> elem*
        
  get-indent-template-line:
    Line([Layout(indent) | elem*@[h | hs]]) -> switch*
    with
        if <?Placeholder(_, _)> h then
            first-elem := SwitchCase(
                          Match(NoAnnoList(Int($[[<next-counter> "switch"]])))
                        , Assign(Var("indent"), NoAnnoList(Str($[[indent]])))
                        ) 
        else
            first-elem := []
        end;
        next-elem* := <filter(no-indent-placeholders)> hs;
        switch*    := <flatten-list> [first-elem, next-elem*]
  
          
  no-indent-placeholders:
    Placeholder(_, _) -> SwitchCase(
                          Match(NoAnnoList(Int($[[<next-counter> "switch"]])))
                        , Assign(Var("indent"), NoAnnoList(Str("\"\"")))
                        )
                        
  get-sep-template-line:
    Line(elem*) -> switch*
    with
        switch* := <filter(get-sep-placeholders)> elem*
        
  get-sep-placeholders:
    p@Placeholder(Label(_ , sort), _) -> SwitchCase(
                          Match(NoAnnoList(Int($[[<next-counter> "switch"]])))
                        , Assign(Var("separator"), NoAnnoList(Str("\"\"")))
                        )    
    where
        <not(?IterSep(_, _) + ?IterStarSep(_, _))> sort
      
  get-sep-placeholders:
    p@Placeholder(Label(_ , sort), _) -> SwitchCase(
                          Match(NoAnnoList(Int($[[<next-counter> "switch"]])))
                        , Assign(Var("separator"), NoAnnoList(Str(sep)))
                        )
    where
        <?IterSep(_, Lit(sep)) + ?IterStarSep(_, Lit(sep))> sort                              
  
  template-to-pp:
    TemplateProduction(SortDef(s), t, Attrs(a*)) ->
      RDefNoArgs(
        $[prettyprint-[s]]
      , Rule(NoAnnoList(input), NoAnnoList(List(output')), cond*)
      )
    where
        not(<fetch-elem(?Reject())> a*)
    with
        !t => SingleLineTemplate(elem*) //either line is [Line([Layout(""), elem*])] or a list of TemplateLines
      < line* := [Line([Layout(""), elem*])] 
      + !t => Template(line*)
    with
      <reset-counter> "pp";
      line'*      := <map(introduce-labels-line)> line*;
      output      := <map(template-line-to-stratego)> line'*;
      arg*        := <mapconcat(?Line(<filter(placeholder-to-var)>))> line'*;
      if !arg* => [arg] then
          if <fetch-elem(?Bracket())> a* then
            input := Op("Parenthetical", arg*);
            (output', cond*) := <thread-alltd(extract-app)> (output, [])
          else
            // injection
            // FIXME: this may result in infinite loop in pretty printer
            //        if there is a cycle of injections in the grammar!
            input := arg;
            (output', with*) := <thread-alltd(extract-app-where)> (output, []);
            cond* := [WhereClause(Not(CallNoArgs(SVar($[is-[s]])))), with*] // check whether there is a rule with constructor already defined, 
                                            // this one should only be applied when there is not
          end
      else
        input            := Tuple(arg*);
        (output', cond*) := <thread-alltd(extract-app)> (output, [])
      end
  
  is-sort-fail:                       //needs to be generated for every sort to avoid undefined strategy
    s -> SDefNoArgs($[is-[s]], Fail())
      
  extract-app :
    (t@App(_, _), e*) -> (Var(x), [e*, WhereClause(Assign(Var(x), t))]) 
    where 
      x := <conc-strings> (<collect-one(?Var(<id>)) <+ !$[t[<next-counter> "pp"]__]> t, "'")    
      
   extract-app-where :
    (t@App(_, _), e*) -> (Var(x), [e*, WhereClause(Assign(Var(x), t))]) 
    where 
      x := <conc-strings> (<collect-one(?Var(<id>)) <+ !$[t[<next-counter> "pp"]__]> t, "'")    
        
  introduce-labels-line:
    Line(elem*) -> Line(elem'*)
    with
      elem'* := <map(try(introduce-labels))> elem*
      
  introduce-labels:
     Placeholder(symbol, c) -> Placeholder(Label(Unquoted(l), symbol), c)
     where
      <not(?Label(_, _))> symbol
     with
       l  := $[t[<next-counter> "pp"]__]      
  
  introduce-labels:
     Placeholder(Label(Unquoted(l), symbol), c) -> Placeholder(Label(Unquoted($[[l]__]), symbol), c)
  
  introduce-labels:
     Placeholder(Label(Quoted(l), symbol), c) -> Placeholder(Label(Unquoted($[[l']__]), symbol), c)
     with
      l' := <un-double-quote> l
   
  introduce-labels:
    term -> <id>  
  
  template-line-to-stratego:   //template line starting with indentation
    Line([Layout(indent) | elem*]) -> 
      App(
          CallT(SVar("pp-indent"), [], [NoAnnoList(Str(is))])
        , NoAnnoList(List(elem'*))
      )
    where
      not(!indent => "");
      not(!elem* => []);
      is     := <string-length; int-to-string; double-quote> indent;
      elem'* := <template-line-elements-to-stratego> elem*
 
  template-line-to-stratego: //template line starting with empty layout
    Line([Layout("") | elem*]) -> NoAnnoList(Op("H", [ NoAnnoList(List([ NoAnnoList(Op("SOpt", [NoAnnoList(Op("HS", [])), NoAnnoList(Str("\"0\""))]))]))
                    , NoAnnoList(List([t*]))]))   //H([SOpt(HS(), "0")], [t*])
    where
      not(!elem* => []);
      t* := <template-line-elements-to-stratego> elem*
  
  template-line-to-stratego:
    // Include empty string element to prevent BOX from removing the empty H box!
    Line([Layout(_)]) ->  NoAnnoList(Op("H", [ NoAnnoList(List([])), NoAnnoList(List([NoAnnoList(Op("S", [NoAnnoList(Str("\"\""))]))]))])) //H([], [S("")])
  
  template-line-elements-to-stratego =
    // 1. Convert Layout to String.
    map(try(\Layout(t) -> String(t)\));
    // 2. Collapse consecutive Strings into single String.
    // (Optional, improves readability and performance of generated code.)
    concatenate-consecutive-strings;
    // 3. Map template elements to strings of Stratego code and String cons,
    //    while removing empty strings.
    // (The latter is necessary to prevent spurious blank lines:
    // BOX removes empty lists, but not empty string elements.)
    filter(template-element-to-stratego)
        
  template-element-to-stratego:
    String(t) -> NoAnnoList(Op("S", [NoAnnoList(Str(t'))]))
    where
      not(!t => "");
      t' := <escape; double-quote> t
      
  template-element-to-stratego:
    p@Placeholder(Label(Unquoted(l), Sort(x)), _) -> App(s, Var(l))
    with
       s := <placeholder-to-pp-one> p 
  
  
  template-element-to-stratego:
    p@Placeholder(Label(Unquoted(l), Opt(Sort(x))), _) -> App(Call(SVar("pp-option"), [s]), Var(l))
    with
       s := <placeholder-to-pp-one> p
      
  placeholder-to-pp-one:
    Placeholder(symbol, option*) -> LChoice(Seq(CallNoArgs(SVar("is-string")), Call(SVar("pp-one-Z"), [CallNoArgs(SVar("prettyprint-origin-term"))]))
                                              , Call(SVar(ppo), [CallNoArgs(SVar($[prettyprint-[s]]))]))
    where
      <collect-om(?Sort(s))> symbol
    with
       if <fetch-elem(?Anchor())> option* then
         ppo := "pp-one-V"
       else
         ppo := "pp-one-Z"
       end
    
  //Label(l), Sort(x), <Star() + Plus()>
  template-element-to-stratego:
    Placeholder(Label(Unquoted(l), <?Iter(Sort(x)) + ?IterStar(Sort(x))>), option*) -> App(LChoice(Seq(CallNoArgs(SVar("is-string")), Call(SVar("pp-one-Z"), [CallNoArgs(SVar("prettyprint-origin-term"))]))
                                                                                           , s), Var(l))
    with
        <fetch-elem(?Wrap())> option* < 
          <fetch-elem(?Anchor())> option* < 
            ppl := SVar("pp-HV-list") // wrap and anchor
              + ppl := SVar("pp-HZ-list") // wrap and !anchor
        + ppl := SVar("pp-H-list")  // !wrap and !anchor
    with 
        ppx := CallNoArgs(SVar($[prettyprint-[x]]));
          // no separator => horizontal box
          s := Call(ppl, [ppx])
           
  template-element-to-stratego:
    Placeholder(Label(Unquoted(l), <?IterSep(Sort(x), Lit(sep)) + ?IterStarSep(Sort(x), Lit(sep))>), option*) -> App(LChoice(Seq(CallNoArgs(SVar("is-string")), Call(SVar("pp-one-Z"), [CallNoArgs(SVar("prettyprint-origin-term"))]))
                                                                                           , s), Var(l))
    with
        <fetch-elem(?Wrap())> option* < 
          <fetch-elem(?Anchor())> option* < 
            ppl := SVar("pp-HV-list") // wrap and anchor
              + ppl := SVar("pp-HZ-list") // wrap and !anchor
        + ppl := SVar("pp-H-list")  // !wrap and !anchor
    with 
        ppx       := CallNoArgs(SVar($[prettyprint-[x]]));
        vs        := <un-double-quote; unescape; explode-string; occurrences(?'\n'); dec> sep;
        literals  := <un-double-quote; string-replace(|"\\n", ""); string-replace(|"_from_kernel", "")> sep;
        kernel    := <un-double-quote; is-substring(!"_from_kernel") < !"1"+ !"0"> sep;
        literals' := NoAnnoList(Str(<double-quote> literals));
        switch !(vs, literals, kernel)
          case ?(_, _, "1"):
            literals'' := <string-replace(|"_from_kernel", "")> sep;
            s          := CallT(ppl, [ppx], [NoAnnoList(Str(literals''))])
          case ?(-1, _, "0"):
            // separator with literals only => horizontal box with sep option
            s := CallT(ppl, [ppx], [literals'])
          case ?(0, "", "0"):
            // separator is a line break => vertical box
            s := Call(SVar("pp-V-list"), [ppx])
          case ?(_, "", "0"):
            // separator is multiple line breaks => vertical box with vs option
            svs := <int-to-string; double-quote> vs;
            s := CallT(SVar("pp-V-list"), [ppx], [NoAnnoList(Str(svs))])
          otherwise:
            // separator has mixed line breaks and literals => vertical box with vs and sep options
            svs := <int-to-string; double-quote> vs;
            s := CallT(SVar("pp-V-list"), [ppx], [NoAnnoList(Str(svs)), literals'])
       end
   
  placeholder-to-var: 
    Placeholder(Label(Unquoted(l), _), _) -> Var(l)
      
  concatenate-consecutive-strings =
    rec r(
         ?[String("") | <r>]
      <+ \[String(a), String(b) | tail] -> <r> [String(<conc-strings> (a, b)) | tail]\
      <+ [id | r]
      <+ ?[]
    )
    
  sort-to-contentcomplete-pp:
    sort -> [ RDefNoArgs($[prettyprint-[sort]], RuleNoCond(NoAnnoList(Op($[[sort]-Plhdr], [])), NoAnnoList(List(
                  [ NoAnnoList(Op("H", [ NoAnnoList(List([ NoAnnoList(Op("SOpt", [NoAnnoList(Op("HS", [])), NoAnnoList(Str("\"0\""))]))]))
                  , NoAnnoList(List([NoAnnoList(Op("S", [NoAnnoList(Str(<concat-strings> ["\"[[", sort,"]]\""] ))]))]))]))]))))
            , SDefNoArgs($[is-[sort]], Match(NoAnnoList(Op($[[sort]-Plhdr], []))))
            , SDefNoArgs("is-SDF-placeholder", Match(NoAnnoList(Op($[[sort]-Plhdr], []))))
            ]
