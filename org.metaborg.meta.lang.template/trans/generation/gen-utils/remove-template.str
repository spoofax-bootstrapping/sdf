module generation/gen-utils/remove-template

imports
  libstratego-sglr
  signatures/TemplateLang-sig
  analysis/analyze
  analysis/desugar
  libstrc
  generation/syntax/to-sdf
  trans/utils/-
  signatures/TemplateLang-sig
  signatures/kernel/Kernel-sig
  signatures/basic/Basic-sig
  signatures/literals/Literals-sig
  signatures/modules/Modules-sig
  
strategies
  
  remove-templates(|chars) = lifting; topdown(try(remove-template(|chars)))
  
rules // Convert templates to regular productions
  
  remove-template(|chars) : 
    SDFSection(ContextFreeSyntax(prods*)) ->  SDFSection(ContextFreeSyntax(prods'*))
    where
      prods'* := <map(try(template-to-sdf3-prod(|chars)))> prods*
     
  template-to-sdf3-prod(|chars):
      TemplateProduction(s, t*, a) -> SdfProduction(s, Rhs(t'*), a')
      with
        case-sensitive  := <?Attrs(<id>); fetch-elem(?CaseInsensitive()) <+ !""> a ;
        t'*       := <template-to-sdf3-symbols(|chars, case-sensitive)> t*;
        a'        := <?Attrs([]); !NoAttrs() <+ id> a
        
    template-to-sdf3-prod(|chars):
      TemplateProductionWithCons(sc, t*, a) -> SdfProductionWithCons(sc, Rhs(t'*), a')
      with
        case-sensitive  := <?Attrs(<id>); fetch-elem(?CaseInsensitive()) <+ !""> a ;
        t'*       := <template-to-sdf3-symbols(|chars, case-sensitive)> t*;
        a'        := <?Attrs([]); !NoAttrs() <+ id> a
        
  template-to-sdf3-symbols(|chars, case):
    SingleLineTemplate(elems) -> elems'
    with
      elems' := <filter(template-elem-to-symbol(|chars, case)); flatten-list> elems
    
  template-elem-to-symbol(|chars, case):
    String(t) -> result
      where
        if CaseInsensitive() := case then 
          result := <string-to-symbol-insensitive(|chars)> t
        else
          result := <string-to-symbol(|chars)> t
        end
    
  //removing layout from separator  
    template-elem-to-symbol(|chars, case):
      Placeholder(symbol, option) -> symbol' 
      where
        <?IterSep(_, Lit(lit)) + ?IterStarSep(_, Lit(lit)) + ?Label(_, IterSep(_, Lit(lit))) 
          + ?Label(_, IterStarSep(_, Lit(lit)))> symbol
      with
        lit' := <separator-to-literal> lit;
        if "" := lit'
        then
          switch !symbol
            case ?IterSep(sym, _)         : symbol' := Iter(sym)
            case ?IterStarSep(sym, _)       : symbol' := IterStar(sym)
            case ?Label(l, IterSep(sym, _))   : symbol' := Label(l, Iter(sym))
            case ?Label(l, IterStarSep(sym, _)) : symbol' := Label(l, IterStar(sym))
          end
        else  
          switch !symbol
            case ?IterSep(sym, _)         : symbol' := IterSep(sym, Lit(<escape; double-quote> lit'))
            case ?IterStarSep(sym, _)       : symbol' := IterStarSep(sym, Lit(<escape; double-quote> lit'))
            case ?Label(l, IterSep(sym, _))   : symbol' := Label(l, IterSep(sym, Lit(<escape; double-quote> lit')))
            case ?Label(l, IterStarSep(sym, _)) : symbol' := Label(l, IterStarSep(sym, Lit(<escape; double-quote> lit')))
          end
        end
  
  template-elem-to-symbol(|chars, case):
      Placeholder(symbol, option) -> symbol
      where
        <not(?IterSep(_, Lit(lit)) + ?IterStarSep(_, Lit(lit)) + ?Label(_, IterSep(_, Lit(lit))) + ?Label(_, IterStarSep(_, Lit(lit))))> symbol
 
  template-to-sdf3-symbols(|chars, case):
      Template(lines*) -> elems*
      with
        elems* := <filter(line-to-symbols(|chars, case)); flatten-list> lines*
    
    line-to-symbols(|chars, case):
      Line(elems*) -> elems'*
      where
        elems'* := <filter(template-elem-to-symbol(|chars, case)); flatten-list; not(?[])> elems*
        
  string-to-symbol(|chars) =  string-edge-tokenize(where({x: ?x; <one(?x)> chars})); map(!Lit(<template-escape; double-quote>))
    
  string-to-symbol-insensitive(|chars) =  string-edge-tokenize(where({x: ?x; <one(?x)> chars})); map(!CiLit(<template-escape; single-quote>))   