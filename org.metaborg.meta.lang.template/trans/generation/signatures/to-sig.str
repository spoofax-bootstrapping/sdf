module generation/to-sig

imports
  libstratego-lib
  libstrc
  analysis/types
  runtime/nabl/-
  runtime/task/-
  runtime/types/-
  generation/gen-utils/to-str
  signatures/TemplateLang-sig
  signatures/modules/Modules-sig
  signatures/sorts/Sorts-sig
  signatures/sdf2-core/Sdf2-Syntax-sig
  
rules
  
  module-to-sig:
    Module(Unparameterized(m), i*, s*) -> Module(m',  [is*, s'])
  with
    m'    := <conc-strings> ("signatures/", m, "-sig");
    is*   := <map(to-str-import(|"-sig", "signatures"))> i*;
    sort* := <filter(sorts-section-to-sig)> s*;
    cons* := <filter(section-to-sig); flatten-list> s*;
    s'    := Signature([sort*, Constructors(cons*)])
 
  sorts-section-to-sig:
    SDFSection(Sorts(s*)) -> Sorts(s'*)
    with
      s'* := <map(sort-to-sig)> s*
      
  section-to-sig:
    SDFSection(LexicalSyntax(p*)) -> sig*
    where
        sig* := <filter(get-sort-from-prod)
               ; nub 
               ; map(lexsort-to-injection)
               ; not(?[])> p* 
  
  get-sort-from-prod:
    <?SdfProduction(SortDef(sort), _, Attrs(a*)) + ?SdfProductionWithCons(SortCons(SortDef(sort), Constructor(_)), _, Attrs(a*))> -> sort
    where
      <not(fetch-elem(?Reject()))> a*
  
  lexsort-to-injection:
    s -> OpDeclInj(FunType([SortType("String")], SortType(s)))
        
  section-to-sig:
    SDFSection(ContextFreeSyntax(p*)) -> <not(?[])> [sig*, cc-sig*]
    where
        cc-sig* := < collect(?SortDef(<strip-annos>) + ?Sort(<strip-annos>))
             ; nub 
             ; map(sort-to-contentcomplete-sig)> p*
    where
        sig*    := <filter(cfg-to-sig <+ template-to-sig)> p*
    
  section-to-sig:
    SDFSection(Kernel(p*)) -> <not(?[])> [sig*, cc-sig*]
    where
        cc-sig* := < collect(?SortDef(<strip-annos>) + ?Sort(<strip-annos>))
             ; nub 
             ; map(sort-to-contentcomplete-sig)> p*
    where
      sig* := <filter(cfg-to-sig)> p*   
 
  sort-to-sig:
    Sort(s) -> SortNoArgs(s)

  cfg-to-sig:
    SdfProductionWithCons(SortCons(SortDef(s),c), _, Attrs(a*)) -> <cons-to-decl> c
    where
      <not(fetch-elem(?Reject() + ?Bracket()))> a*
      
  cfg-to-sig:
    SdfProduction(SortDef(s), rhs, Attrs(a*)) -> OpDeclInj(t')
    where
      <not(fetch-elem(?Reject() + ?Bracket()))> a*
    with  
      rhs-type := <get-type> rhs;
      t'       := <try(check-fun-type)> FunType(rhs-type, SortType(s))
    
  // kernel productions
   cfg-to-sig:
     SdfProduction(Lex(SortDef(s)), rhs, Attrs(a*)) -> OpDeclInj(t')
     where
      <not(fetch-elem(?Reject() + ?Bracket()))> a*
     with 
      rhs-type := <get-type> rhs;
      t'       := <try(check-fun-type)> FunType(rhs-type, SortType(s))
      
  cfg-to-sig:
     SdfProduction(Cf(SortDef(s)), rhs, Attrs(a*)) -> OpDeclInj(t')
     where
      <not(fetch-elem(?Reject() + ?Bracket()))> a*
     with 
      rhs-type := <get-type> rhs;
      t'       := <try(check-fun-type)> FunType(rhs-type, SortType(<strip-annos> s))
      
  cfg-to-sig:
    SdfProductionWithCons(SortCons(Cf(SortDef(s)),c), _, Attrs(a*)) -> <cons-to-decl> c
    where
      <not(fetch-elem(?Reject() + ?Bracket()))> a*  
      
  cfg-to-sig:
    SdfProductionWithCons(SortCons(Lex(SortDef(s)),c), _, Attrs(a*)) -> <cons-to-decl> c
    where
      <not(fetch-elem(?Reject() + ?Bracket()))> a* 
   
  section-to-sig:
    TemplateSection(t*) -> sig*
    with
      sig* := <filter(template-to-sig); not(?[])> t*
          
  template-to-sig:
    TemplateProductionWithCons(SortCons(SortDef(s), c), _, Attrs(a*)) -> <cons-to-decl> c
    where
      <not(fetch-elem(?Reject() + ?Bracket()))> a*  
      
  template-to-sig:
    TemplateProduction(SortDef(s), t, Attrs(a*)) -> OpDeclInj(t')
    where
      <not(fetch-elem(?Reject() + ?Bracket()))> a*
    with  
      temp-type := <get-type> t;
      t'        := <try(check-fun-type)> FunType(temp-type, SortType(<strip-annos> s))
      
  cons-to-decl:
    Constructor(c) -> OpDecl(c, t)
    with
      t := <get-type; try(check-fun-type)> c
     
  check-fun-type: FunType([], t) -> t
  
  sort-to-contentcomplete-sig:
        sort -> OpDecl($[[sort]-Plhdr], ConstType(SortNoArgs($[[sort]])))
